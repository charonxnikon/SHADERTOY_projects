{
 "userName": "xnikon",
 "date": "2022-05-25T09:55:07.012Z",
 "numShaders": 5,
 "shaders": [
  {
   "ver": "0.1",
   "info": {
    "id": "NdB3RG",
    "date": "1617543474",
    "viewed": 26,
    "name": "glitch_XNikon",
    "description": "Created for CG 2021 by Nikonov Maxim\n\nTask number 2 ",
    "likes": 0,
    "published": "Public",
    "usePreview": 0,
    "tags": [
     "unknown"
    ]
   },
   "renderpass": [
    {
     "inputs": [
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dfGRr",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) ;/// float(iFrame + 1); //отключение накопления для вращения\n    //fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}",
     "name": "Image",
     "description": "",
     "type": "image"
    },
    {
     "inputs": [
      {
       "id": "XsfGRn",
       "filepath": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
       "type": "texture",
       "channel": 0,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "4dX3Rn",
       "filepath": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg",
       "type": "texture",
       "channel": 2,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XdX3zn",
       "filepath": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg",
       "type": "cubemap",
       "channel": 1,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "Xsf3Rr",
       "filepath": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg",
       "type": "texture",
       "channel": 3,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dXGR8",
       "channel": 0
      }
     ],
     "code": "const float INF = 1e10;\nvec3 CAMERA_POS = vec3(1,1.2,-6); //начальная позиция камеры - вектор из x,y,z \nvec3 LIGHT1_POS = vec3(-2.2,1.2,4); // позиция ист света \nconst float LIGHT1_RADIUS = 0.5; //радиус источника света\nvec3 LIGHT1_COLOR = vec3(1,1,1); //цвет ист св \nvec3 LIGHT2_POS = vec3(3,1.5,-1);  // позиция ист св 2\nconst float LIGHT2_RADIUS = 0.55; //радиус источника света 2\nconst vec3 LIGHT2_COLOR = vec3(0.1,0.7,0.7); //цвет источника света 2\nconst int EMISSION = 0; \nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float OBJ_RADIUS = 1.0; // не трогать !!!! но это для увелечения фигуры - лучше не делать больше 1.5\nconst float GLASS_N = 1.5; //коэф преломления стекла\nconst float AIR_N = 1.0; // коэф преломления воздуха\nconst float DIAMOND_N = 2.5; // алмаза (внутри для вкрапвлений входной луч - алмаз, выходной - стекло, тк они в стекле, за счет этоого и достигается эффект, что они внутри)\nconst float WATER_N = 1.0; // воды (не нужно)\nconst float EPS = 0.0000001; //для трассировки треугольника для трассировки октаэдра\n\nvec3 randDir; \n\nstruct SphereObj {\n    vec3 pos;\n    float radius;\n    vec3 color;\n};\n\n\n//0.125 - радиус вкрапления\n//vec3 определяет его местоположение, чтобы добавить новый - изменить 5 на 6 или 7 и поставить такие же строки ниже\n//с новыми координатами так, чтобы оно было внутри фигуры (ручками)\n//вставить такие же строи, не забудь, что в конце там запятые кроме последней строки, иначе не заработает по синтаксису\nSphereObj sphereIn[5] = SphereObj[5](\n    SphereObj(vec3(0, 0, 0), 0.125, vec3(1, 0.1, 0.75)), \n    SphereObj(vec3(0.29, 0.025, 0.35), 0.125, vec3(1, 0.5, 0.3)),\n    SphereObj(vec3(0, -0.7, 0.35), 0.125, vec3(0.1, 0.8, 0.2)),\n    SphereObj(vec3(0.2, 0.5, 0), 0.125, vec3(0.6, 1, 0.9)),\n    SphereObj(vec3(-0.35, -0.3, 0), 0.125, vec3(0.6, 0.1, 1))\n);\n\n//трассировка пола\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\n\n//трассировка шара \nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n//трассировка треугольника (обычного на плоскости буквально, из него составляем фигуру - пирамиду и еще пирамиду и квадрат даже можно)\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 N,vec3 vertex0, vec3 vertex1, vec3 vertex2 )\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\n//трассировка подставки - цилиндра\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    } \n    return INF;\n}\n\n\n//трассировка фигуры основной (побито на трессировки треугольников)\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    vec3 coords[6] = vec3[6](\n        vec3(-r, 0, 0),\n        vec3(0, -r, 0),\n        vec3(r, 0, 0),\n        vec3(0, r, 0),\n        vec3(0, 0, r),\n        vec3(0, 0, -r)\n    );\n    \n    vec3 trCoords[8] = vec3[8] (\n        vec3(0, 1, 4),\n        vec3(1, 2, 4),\n        vec3(2, 3, 4),\n        vec3(3, 0, 4),\n        vec3(0, 1, 5),\n        vec3(1, 2, 5),\n        vec3(2, 3, 5),\n        vec3(3, 0, 5)\n    );\n    \n    float t = INF;\n    \n    for (int i = 0; i < 8; i++) {\n        vec3 curNormal;\n        float curT = traceTriangle(pos, dir, curNormal, coords[int(trCoords[i].x)], coords[int(trCoords[i].y)], coords[int(trCoords[i].z)]);\n        if (curT < t) {\n            t = curT;\n            normal = curNormal;\n        }\n    }\n    \n    return t;\n}\n\n\n//трассировка фигуры. просто так было нужно. сначала вызывается она, потом та, что выше\nfloat traceObject(vec3 pos, vec3 dir, float h_from_0, out vec3 normal) {\n    return traceOct(pos, dir, h_from_0, normal);\n}\n\n\n//мягкие тени делает (на фигуру)\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 CubeNorm;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\n//тоже делает мягкие тени работают в паре (добавляют тени от цвета)\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n//функция прозрачности(на самом деле есть встроенная такая же почти, но тут по идее есть полное внутреннее отражение)\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal)<0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\n//функция квадрат числа\nfloat pow2(float x) {\n    return x * x;\n}\n\n//функция ранлома\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\n    //чтобы включить накопление, изменить в buffer B комментарий убрать и в Image\n    //и внизу убрать коммент на traceOBj\n    //если включить и начать вращать, то будет накопление блюра (смазывание бесконечное) \n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    float val = 17.5; //эту строчку обязательно добавь к себе в код\n    val = iTime; // и потом аналогичную этой удали и замени на это\n    \n            //включение кручения камеры !!!\n    //CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    \n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    //vec3 randVals = vec3(0.0, 0.0, 0.0); // выключение антиалисаинга (доп балл и для шаров нужно для цвета, если отключишь, то они не будут цветными, зато бликовать не будет)\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x; \n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N); // формула френеля для стекла (едля смены материала стекла и прозрачности)\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    vec3 curPos = CAMERA_POS; // текущая позиуия - позиция камеры для трассировки ВСЕГО\n    vec3 curDir = viewVec; // для трассировки ВСЕГО\n    vec3 colorMult = vec3(1, 1, 1); //изменение цвета вкраплений (оно идет просто накоплением(ручками не изменишь))\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        float nEnter = GLASS_N;\n        // t = изменение нормали от текущей нормали, которая задается в трассировках \n        //трассировка стола реализация\n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n        }\n        //трассировка 1 ист света\n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR;\n            normal = L1Norm;\n        }\n        //трассировка 2 ист света\n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            n1 = AIR_N;\n            n2 = AIR_N;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n            materialType = REFRACTION;   \n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = AIR_N;\n                }\n        }\n       // трассировка фигуры\n       vec3 objNorm;\n        float objT = traceObject(curPos, curDir, OBJ_RADIUS, objNorm);\n        if (objT < t) {\n            t = objT;\n            normal = objNorm;\n            materialType = REFRACTION;\n            if (randVals.x < GLASS_R * 5.0) {\n                //materialType = REFLECTION; отключения накопления (тк нет накопления начинает бликать)\n            } else {\n                //materialType = REFRACTION; откоючения накопления (тк нет накопления начинает бликать)\n                colorMult *= vec3(0.8, 0.8, 0.9);\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            } \n        }\n        //трассировка подставки\n        vec3 cylNorm; \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { \n            t = cylT;\n            materialType = DIFFUSE; \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3,worldPos.xz*worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        } \n        //трассировка вкраплений в цикле\n        vec3 sphNorm;\n        for (int i = 0; i < sphereIn.length(); i++) {\n            float sphInT = traceSphere(curPos - sphereIn[i].pos, curDir, sphereIn[i].radius, sphNorm);\n            if (sphInT < t) {\n                normal = sphNorm;\n                if (randVals.x < DIAMOND_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= sphereIn[i].color;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_N;\n                    } else {\n                        nEnter = DIAMOND_N;\n                    }\n                }\n            }\n        }\n        //обработка материалов\n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curPos += curDir * t;\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult;  //кубмап - окружение за доп балл(где texture)\n            \n        }\n    }\n}",
     "name": "Buffer A",
     "description": "",
     "type": "buffer"
    },
    {
     "inputs": [
      {
       "id": "4dXGR8",
       "filepath": "/media/previz/buffer00.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "XsXGR8",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);// + texture(iChannel1,uv); //отключение накопления для вращения\n    //fragColor = texture(iChannel0,uv) + texture(iChannel1,uv); \n}",
     "name": "Buffer B",
     "description": "",
     "type": "buffer"
    }
   ]
  },
  {
   "ver": "0.1",
   "info": {
    "id": "ssSGzK",
    "date": "1653472172",
    "viewed": 1,
    "name": "buffer XNikon",
    "description": "XNikon buffer",
    "likes": 0,
    "published": "Unlisted",
    "usePreview": 0,
    "tags": [
     "cg"
    ]
   },
   "renderpass": [
    {
     "inputs": [
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dfGRr",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}",
     "name": "Image",
     "description": "",
     "type": "image"
    },
    {
     "inputs": [
      {
       "id": "4dXGR8",
       "filepath": "/media/previz/buffer00.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "XsXGR8",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv)  + texture(iChannel1,uv);\n}",
     "name": "Buffer B",
     "description": "",
     "type": "buffer"
    },
    {
     "inputs": [
      {
       "id": "4dXGRn",
       "filepath": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg",
       "type": "texture",
       "channel": 2,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsfGRn",
       "filepath": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
       "type": "texture",
       "channel": 1,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsfGzn",
       "filepath": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg",
       "type": "cubemap",
       "channel": 3,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "4sfGzn",
       "filepath": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png",
       "type": "cubemap",
       "channel": 0,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dXGR8",
       "channel": 0
      }
     ],
     "code": "const float INF = 1e9;\nconst float SPHERE_R = 1.0;\nvec3 CAMERA_POS = vec3(6, 1.2, -6);\nconst vec3 LIGHT_POS = vec3(2, 1.5, 0);\nconst float LIGHT_RADIUS = 0.25;\nconst vec4 LIGHT_COLOR = vec4(1, 1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec4 LIGHT2_COLOR = vec4(0.1, 0.7, 0.1, 1);\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\n    // abs(pos + t * dir) = r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t = r * r\n    // D = 4 * dot(pos, dir) ^ 2 - 4 * (dot(pos, pos) - r * r)\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - R * R);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t < 0.0)\n        t = (-b + sqrt(D));\n    if (t < 0.0)\n        return INF;\n    vec3 wPos = pos + t * dir;\n    normal = normalize(wPos);\n    return t;\n}\n\nvec3 planeThrough3Points(vec3 p1, vec3 p2, vec3 p3, out float move) {\n    vec3 p1p2 = p1 - p2;\n    vec3 p1p3 = p1 - p3;\n    \n    vec3 normal = cross(p1p2, p1p3);\n    move = dot(normal, p1);\n    return normal;\n}\n\nfloat traceTriangle(vec3 dot1, vec3 dot2, vec3 dot3,vec3 pos, vec3 dir, out vec3 normal) {\n    \n    float move;\n    \n    vec3 norm = planeThrough3Points(dot1, dot2, dot3, move);\n    \n    // dot(pos + t * dir, norm) == move\n    // t = (move - dot(pos, norm)) / dot(dir, norm)\n    \n    float divider = dot(dir, norm);\n    float div = move - dot(pos, norm);\n    \n    /*if (divider < 1e-12) {\n        return INF;\n    }*/\n    \n    float t = div / divider;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    \n   \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n    \n    float angle12 = acos(dot(v1, v2));\n    float angle13 = acos(dot(v1, v3));\n    float angle23 = acos(dot(v2, v3));\n    \n    if (abs(angle12 + angle13 + angle23 - radians(360.0)) < 1e-3) {\n        normal = normalize(norm);\n        float angle = acos(dot(normalize(dir), normal));\n        if (angle < radians(90.0)) {\n            normal = -normalize(norm);\n        }\n        return t;\n    } else {\n        return INF;\n    }\n    \n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal) {\n\n    vec3 dot1 = vec3(0.0, -0.99, 1.0);\n    vec3 dot2 = vec3(-sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot3 = vec3(sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot4 = vec3(0.0, sqrt(2.0) - 0.99, 0.0);\n    \n    float t = INF;\n    \n    vec3 norm = vec3(0.0, 1.0, 0.0);\n    \n    /*vec3 t1norm = norm;\n    float t1 = traceTriangle(dot1, dot2, dot3, pos, dir, t1norm);\n    if (t1 < t) {\n        t = t1;\n        norm = t1norm;\n    }*/\n    \n    vec3 t2norm = norm;\n    float t2 = traceTriangle(dot1, dot3, dot4, pos, dir, t2norm);\n    if (t2 < t) {\n        t = t2;\n        norm = t2norm;\n    }\n    \n    vec3 t3norm = norm;\n    float t3 = traceTriangle(dot2, dot1, dot4, pos, dir, t3norm);\n    if (t3 < t) {\n        t = t3;\n        norm = t3norm;\n    }\n    \n    vec3 t4norm = norm;\n    float t4 = traceTriangle(dot3, dot2, dot4, pos, dir, t4norm);\n    if (t4 < t) {\n        t = t4;\n        norm = t4norm;\n    }\n    if (t < INF) {\n        normal = normalize(norm);\n    }\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 1.0f;\n    const float H = 0.1f;\n    float floorT = (-1.0 - pos.y) / dir.y;\n    if (floorT < 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 wPos = pos + t * dir;\n        normal = normalize(vec3(wPos.x, 0, wPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat isOccluded(vec3 pos, vec3 target) {\n    vec3 rvec = target - pos;\n    float dist = length(rvec);\n    vec3 dir = rvec / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = -1.0;\n    \n    t = tracePyramid(pos, dir, normal);\n    if (dist >= t) {\n        return 0.5;\n    }\n    vec3 cylNormal = normal;\n    t = traceCylinder(pos, dir, cylNormal);\n    if (t > 0.0 && dist >= t) {\n        return 0.0;\n    }\n    return 1.0;\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 lightPos = LIGHT_POS + randDir * LIGHT_RADIUS;\n    vec3 toLight = lightPos - worldPos;\n    float occl = isOccluded(worldPos + normalize(toLight) * 1e-3, lightPos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * occl;\n\n    vec3 light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - worldPos;\n    float occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * occl2;\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + textureLod(iChannel0, viewVec, 10.0) * 0.3\n    ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //CAMERA_POS = vec3(0.0, 1.2, -6.0);\n    float val = 17.5;\n    //val = iTime;\n    CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    //randVals = vec3(0.0, 0.0, 0.0);\n    randDir = normalize(randVals * 2.0 - 1.0);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    \n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n\n    vec3 colorMult = vec3(1, 1, 1);\n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    int iterationType;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n\n    // Output to screen\n    for (int i = 0; i < 10; ++i) {\n        vec3 normal = vec3(0, 0, 0);\n        float nEnter = AIR_N;\n        vec3 color;\n        \n        float t = INF;\n\n        t = traceSphere(curPos - LIGHT_POS, curDir, LIGHT_RADIUS, normal);\n        if (t != INF) {\n            color = LIGHT_COLOR.rgb;\n            //color = normal;\n            iterationType = EMISSION;\n        }\n        \n        float l2_t = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, normal);\n        if (t > l2_t) {\n            t = l2_t;\n            color = LIGHT2_COLOR.rgb;\n            //color = normal;\n            iterationType = EMISSION;\n        }\n\n        /*float sphere_t = traceSphere(currentPos, viewVec, SPHERE_R, normal);\n        if (sphere_t < t) {\n            if (GLASS_R > randVals.y) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n            }\n            t = sphere_t;\n        }*/\n        vec3 pyrNormal = normal;\n        float pyramid_t = tracePyramid(curPos, curDir, pyrNormal);\n        if (pyramid_t < t) {\n            /*t = pyramid_t;\n            color = vec3(0.0, 1.0, 0.0) * 5.0;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel2, pos.xz * 5.0).rgb;\n            iterationType = DIFFUSE;*/\n            // iterationType = EMISSION;\n            // iterationType = REFRACTION;\n            \n            if (randVals.x < GLASS_R * 8.0) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n            }\n            normal = pyrNormal;\n            t = pyramid_t;\n            color = reflect(curDir, normal);\n        }\n        \n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(curPos, curDir, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            vec3 pos = curPos + t * curDir;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            iterationType = DIFFUSE;\n        }\n        // (c + t * v).y = -1.2\n        // t = (-1.2 -c.y) / v.y\n        float floorT = (-1.2 - curPos.y) / curDir.y;\n        if (floorT > 0.0 && floorT < t && length(curPos + floorT * curDir) < 10.0f) {\n            t = floorT;\n            vec3 pos = curPos + t * curDir;\n            color = texture(iChannel2, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            iterationType = DIFFUSE;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (iterationType == EMISSION) {\n                fragColor.rgb = colorMult* color;\n                break;\n            } else if (iterationType == DIFFUSE) {\n                fragColor.rgb += colorMult * computeLighting(curPos + t * curDir, color, normal, curDir);\n                break;\n            } else if (iterationType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                // fragColor.rgb = curDir;\n            } else if (iterationType == REFRACTION) {\n                curDir = refract(curDir, normal, nEnter / n1);\n                curPos = worldPos + curDir * 3e-2;\n                curDir = refract(curDir, normal, n1 / nEnter);\n                //fragColor.rgb = curDir;\n                // n1 = nEnter;\n                \n            }\n        } else {\n            fragColor.rgb = colorMult * texture(iChannel0, curDir).rgb;\n        }\n    }\n}",
     "name": "Buffer A",
     "description": "",
     "type": "buffer"
    }
   ]
  },
  {
   "ver": "0.1",
   "info": {
    "id": "fdBGz3",
    "date": "1653472155",
    "viewed": 1,
    "name": "buffer 2 by XNikon",
    "description": "CG",
    "likes": 0,
    "published": "Public",
    "usePreview": 0,
    "tags": [
     "cg"
    ]
   },
   "renderpass": [
    {
     "inputs": [
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dfGRr",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);// / float(iFrame + 1);\n}",
     "name": "Image",
     "description": "",
     "type": "image"
    },
    {
     "inputs": [
      {
       "id": "4sXGRn",
       "filepath": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg",
       "type": "texture",
       "channel": 0,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsfGzn",
       "filepath": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg",
       "type": "cubemap",
       "channel": 1,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dXGR8",
       "channel": 0
      }
     ],
     "code": "const float INF = 1e10;\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nvec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 Light1_pos = vec3(2, 1, 0);\nconst float Light1_r = 0.5;\nconst vec3 Light1_col = vec3(1,1,0);\nconst float Light1_int = 10.0;\nconst vec3 Light2_pos = vec3(-1, 1.5, 1);\nconst float Light2_r = 0.25;\nconst vec3 Light2_col = vec3(0,1,1);\nconst float Light2_int = 20.0;\nconst float k = 0.1;\nvec3 randDir;\n\nfloat powf(float x, int a) {\n    float q = x;\n    int i = a;\n    while (i-- > 1) q *= x;\n    return a == 0 ? 0.0 : q;\n}\n\nfloat noise(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1, 57, 21)) + vec4(0, 57, 21, 78);\n\tvec3 f = cos((p-i)*acos(-1.0))*(-0.5) + 0.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.0 + a)*(1.0 + a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432)))*43758.5453);\n}\n\nstruct Material {\n    float emission;\n    float diffusion;\n    float reflection;\n    float refraction;\n    float n;\n    int spectral_exp;\n    vec3 col;\n};\n\nstruct Sphere {\n    vec3 pos;\n    float radius;\n    Material m;\n};\n\nstruct Light {\n    Sphere sphere;\n    float intensity;\n};\n\nstruct Triangle {\n    vec3 vertecies[3];\n};\n\nstruct Pyramid {\n    vec3 vertecies[5];\n    Material m;\n};\n\nstruct Scene {\n    Light[2] lights;\n    Pyramid pyramid;\n} scene;\n\nfloat flame(vec3 p)\n{\n    float d = length(vec3(0, 1, 0) - p*vec3(1, 0.7, 1)) - 1.0;\n\treturn d + (noise(p + vec3(0, 5, 0)) + noise(p * 3.0)* 0.5)* 0.25 *(p.y) ;\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n    float k = 64.0;\n\t\n\tfor(int i = 0; i < int(k); i++)\n\t{\n\t\td = min(150.0 - length(p), abs(flame(p))) + eps;\n\t\tp += d * dir;\n\t\tif (d > eps)\n\t\t{\n            glowed = glowed || flame(p) < 0.0;\n\t\t\tglow = glowed ? float(i)/k : 0.0;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nfloat tracePlane(vec3 camPos, vec3 dir, out vec3 N) {\n    float t = (-1.0 - camPos.y)/ dir.y;\n    vec3 worldPos = t * dir + camPos;\n    if (t < 0.0 || dot(worldPos.xz, worldPos.xz) > 100.0) return INF;\n    N = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, Triangle tr, out vec3 N)\n{\n    const float EPSILON = 0.0000001;\n    vec3 vertex0 = tr.vertecies[0];\n    vec3 vertex1 = tr.vertecies[1];  \n    vec3 vertex2 = tr.vertecies[2];\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPSILON && a < EPSILON) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPSILON) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, Pyramid p, out vec3 N) {\n    Triangle t1 = Triangle(vec3[3](p.vertecies[0], p.vertecies[1], p.vertecies[2]));\n    Triangle t2 = Triangle(vec3[3](p.vertecies[0], p.vertecies[2], p.vertecies[3]));\n    Triangle t3 = Triangle(vec3[3](p.vertecies[0], p.vertecies[3], p.vertecies[4]));\n    Triangle t4 = Triangle(vec3[3](p.vertecies[0], p.vertecies[4], p.vertecies[1]));\n    Triangle t5 = Triangle(vec3[3](p.vertecies[1], p.vertecies[2], p.vertecies[3]));\n    Triangle t6 = Triangle(vec3[3](p.vertecies[3], p.vertecies[4], p.vertecies[1]));\n    Triangle tr[6] = Triangle[6](t1, t2, t3, t4, t5, t6);\n    vec3 tmpN;\n    float t = INF;\n    for (int i = 0; i < tr.length(); i++) {\n        float triangleT = traceTriangle(pos, dir, tr[i], tmpN);\n        if (triangleT < t) {\n            t = triangleT;\n            N = tmpN;\n        }\n    }\n    return t;\n}\n\n\nfloat traceSphere(vec3 camPos, vec3 dir, Sphere s, out vec3 N) {\n    vec3 pos = camPos - s.pos;\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + s.radius * s.radius;\n    if (D < 0.0) return INF;\n    float t = -b - sqrt(D);\n    t = t < 0.0 ? -b + sqrt(D) : t;\n    if (t < 0.0) return INF;\n    N = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceScene(vec3 pos, vec3 dir, out vec3 N, out Material m) {\n    vec3 tmpN;\n    float t = INF;\n    float pyrT = tracePyramid(pos, dir, scene.pyramid, tmpN);\n    if (pyrT < t) {\n        t = pyrT;\n        N = tmpN;\n        m = scene.pyramid.m;\n    }\n    return t;\n}\n\nbool isOccluded(vec3 pos, Light light) {\n    vec3 dir = light.sphere.pos - pos + randDir * light.sphere.radius;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 tmpN;\n    Material tmpM;\n    float t = traceScene(pos + dir * 1e-3, dir, tmpN, tmpM);\n    return t < dist;\n}\n\nvec3 computeLight(vec3 pos, vec3 dir, vec3 N, Material m) {\n    vec3 lightPower = vec3(0);\n    vec3 spectralLight = vec3(0);\n    for (int i = 0; i < scene.lights.length(); i++) {\n        vec3 toLight = scene.lights[i].sphere.pos - pos;\n        float att = isOccluded(pos, scene.lights[i]) ? 0.5 : scene.lights[i].intensity / dot(toLight, toLight);\n        lightPower += max(0.0, dot(N, normalize(toLight))) * att * scene.lights[i].sphere.m.col;\n        spectralLight += powf(max(0.0, dot(dir, reflect(normalize(toLight), N))), m.spectral_exp) * vec3(1) * att;\n    }\n    lightPower += texture(iChannel1, N).rgb * 0.1;\n    return m.col * lightPower + spectralLight;\n}\n\nvec3 refraction(vec3 v, vec3 N, float n1, float n2) {\n    if (dot(v,N) < 0.0) N = -N;\n    float cosA = dot(v, N);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tg = normalize(v - cosA*N);\n    float sinB = sinA/n2 * n1;\n    float cosB = sqrt(1.0 - sinB*sinB);\n    return sinB * tg + cosB * N;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    //init\n    CAMERA_POS = vec3(0, 1.2, -6);\n    float val = 17.5;\n    val = iTime;\n    CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    vec2 screenUV = fragCoord/iResolution.xy;\n    vec3 randV = vec3(rand(float(iFrame)), rand(float(iFrame +5)), rand(float(iFrame + 15)));\n    randDir = normalize(randV - 0.5);\n    Material emissive = Material(1.0, 0.0, 0.0, 0.0, AIR_N, 0, vec3(0));\n    Material diffusive = Material(0.0, 1.0, 0.0, 0.0, AIR_N, 0, vec3(0));\n    Material reflective = Material(0.0, 0.0, 1.0, 0.0, AIR_N, 0, vec3(0));\n    Material refractive = Material(0.0, 0.0, 0.0, 1.0, GLASS_N, 0, vec3(0));\n    Material glass = Material(0.0, 0.4, 1.0, 1.0, GLASS_N, 50, vec3(1));\n    Material light1_m = emissive;\n    light1_m.col = Light1_col;\n    Material light2_m = emissive;\n    light2_m.col = Light2_col;\n    Light light1 = Light(Sphere(Light1_pos, Light1_r, light1_m), Light1_int);\n    Light light2 = Light(Sphere(Light2_pos, Light2_r, light2_m), Light2_int);\n    Light lights[2] = Light[2](light1, light2);\n    float ang = 0.5;\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    vec2 pyrXZ1 = rot * vec2(1, -1);\n    vec2 pyrXZ2 = rot * vec2(1, 1);\n    vec2 pyrXZ3 = rot * vec2(-1, 1);\n    vec2 pyrXZ4 = rot * vec2(-1, -1);\n    Pyramid pyramid = Pyramid(vec3[5](vec3(0., 1., 0.), vec3(pyrXZ1.x, -0.99, pyrXZ1.y),\n            vec3(pyrXZ2.x, -0.99, pyrXZ2.y), vec3(pyrXZ3.x, -0.99, pyrXZ3.y),\n            vec3(pyrXZ4.x, -0.99, pyrXZ4.y)), glass);\n    scene.lights = lights;\n    scene.pyramid = pyramid;\n    \n    //calculate coord and viewVec\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randV.xy - 0.5) * 2.0)/iResolution.x;\n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up* uv.y);\n    \n    //trace\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    float n1 = AIR_N;\n        float n2 = AIR_N;\n    vec3 col = vec3(0);\n    \n    \n    for (int j = 0; j < 10; j++) {\n        float t = INF;\n        bool intersect;\n        vec3 N;\n        vec3 tmpN;\n        \n        Material material;\n        \n        \n        //trace lights(models)\n        for (int i = 0; i < lights.length(); i++) {\n            float lightT = traceSphere(curPos, curDir, lights[i].sphere, tmpN);\n            if (lightT < t) {\n                t = lightT;\n                N = tmpN;\n                material = lights[i].sphere.m;\n            }\n        }\n        \n        //traceScene\n        Material tmpM;\n        float sceneT = traceScene(curPos, curDir, tmpN, tmpM);\n        if (sceneT < t) {\n            t = sceneT;\n            N = tmpN;\n            material = tmpM;\n        }\n        \n        vec3 worldPos = t * curDir + curPos;\n        //trace plane\n        float planeT = tracePlane(curPos, curDir, tmpN);\n        if (planeT < t) {\n            t = planeT;\n            N = tmpN;\n            worldPos = t * curDir + curPos;\n            material = diffusive;\n            material.col = texture(iChannel0, worldPos.xz * 0.1).rgb;\n        }\n        \n        //calculate color\n        bool isEmissive = material.emission > 0.0;\n        bool isDiffusive = material.diffusion > 0.0;\n        bool isReflective = material.reflection > 0.0;\n        bool isRefractive = material.refraction > 0.0;\n        if (isReflective) {\n            n1 = n2;\n            n2 = material.n;\n        }\n        float R = powf((n1-n2)/(n1+n2), 2);\n        bool reflAndRefr = isReflective && isRefractive;\n        isReflective = (reflAndRefr && randV.x * 0.2 < R) || (!reflAndRefr && isReflective);\n        isRefractive = (reflAndRefr && !isReflective) || (!reflAndRefr && isRefractive);\n        \n        if (isEmissive) {\n            col +=  material.col * material.emission * k;\n        }\n        else if (isDiffusive) {\n            col += computeLight(worldPos, curDir, N, material) * material.diffusion * k;\n        }\n        if (isReflective) {\n            curDir = reflect(curDir,N);\n            curPos = worldPos + curDir * 1e-3;\n        }\n        else if (isRefractive) {\n            curDir = refraction(curDir, N, n1, n2);\n            curPos = worldPos + curDir * 1e-3;\n            \n            if (n1 == AIR_N && n2 == GLASS_N) {\n                vec4 p = raymarch(curPos + vec3(2.5, 7, -13), curDir);\n                float glow = p.w;\n                vec3 flamecol = mix( vec3(0.1, 0.5, 1), vec3(1, 0.5, 0.1), p.y * 0.022 + 2.5) ;\n                col += mix(vec3(0), flamecol, pow(glow * 2.0, 4.0));\n            }\n        }\n\n        if (t == INF) {\n            col += k * texture(iChannel1, curDir).rgb;\n        }\n    }\n        \n    fragColor = vec4(col, 1.0);\n             \n    \n}",
     "name": "Buffer A",
     "description": "",
     "type": "buffer"
    },
    {
     "inputs": [
      {
       "id": "4dXGR8",
       "filepath": "/media/previz/buffer00.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "XsXGR8",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) ;//+ texture(iChannel1,uv);\n}",
     "name": "Buffer B",
     "description": "",
     "type": "buffer"
    }
   ]
  },
  {
   "ver": "0.1",
   "info": {
    "id": "NsB3Rd",
    "date": "1653472119",
    "viewed": 2,
    "name": "Fire Cube XNikon",
    "description": "mda",
    "likes": 0,
    "published": "Public",
    "usePreview": 0,
    "tags": [
     "cg"
    ]
   },
   "renderpass": [
    {
     "inputs": [
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dfGRr",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}",
     "name": "Image",
     "description": "",
     "type": "image"
    },
    {
     "inputs": [
      {
       "id": "4dXGR8",
       "filepath": "/media/previz/buffer00.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "XsXGR8",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1,uv);\n}",
     "name": "Buffer B",
     "description": "",
     "type": "buffer"
    },
    {
     "inputs": [
      {
       "id": "XsfGRn",
       "filepath": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
       "type": "texture",
       "channel": 0,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "4dX3Rn",
       "filepath": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg",
       "type": "texture",
       "channel": 3,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XdX3zn",
       "filepath": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg",
       "type": "cubemap",
       "channel": 1,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XdX3Rr",
       "filepath": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin",
       "type": "volume",
       "channel": 2,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dXGR8",
       "channel": 0
      }
     ],
     "code": "// менять текстуры внизу (iChannel0,....)\n\nconst float INF = 1e10;\nvec3 randDir; \nvec3 flamecol;\nvec3 CAMERA_POS = vec3(1,1.2,-6); //тут меняешь позицию камеры (лучше не трогать)\nvec3 LIGHT1_POS = vec3(0.85,1.4,4); // тут меняешь позицию освещения луны\nconst float LIGHT1_RADIUS = 0.5; \nvec3 LIGHT1_COLOR = vec3(0,0.4,1); //цвет осв 2\nvec3 LIGHT2_POS = vec3(-2.2,1.4,4);// тут меняешь позицию освещения зеленое - позицию\nconst float LIGHT2_RADIUS = 0.55; \nconst vec3 LIGHT2_COLOR = vec3(1.1,0.7,0.7); //цвет осв 1\nconst int EMISSION = 0; \nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float GLASS_N = 1.5; \nconst float AIR_N = 1.0;\nconst float DIAMOND_N = 2.5;\nconst float WATER_N = 1.0; \nconst float EPS = 0.0000001; \n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 vertex0, vec3 vertex1, vec3 vertex2, vec3 pos, vec3 dir, out vec3 N)\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    } \n    return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal){\n       vec3 vertexes[8];\n    float rot = 0.0;\n    float e = 1.5;\n    vec3 c = vec3(0, -0.245, 0);\n    vec3 ex = vec3(e/2.0 * cos(rot), 0, e/2.0 * sin(rot));\n    vec3 ey = vec3(0, e/2.0, 0);\n    vec3 ez = vec3(-e/2.0 * sin(rot), 0, e/2.0 * cos(rot));\n    vertexes[0] = c - ex - ey + ez;\n    vertexes[1] = c - ex + ey + ez;\n    vertexes[2] = c + ex + ey + ez;\n    vertexes[3] = c + ex - ey + ez;\n    vertexes[4] = c + ex - ey - ez;\n    vertexes[5] = c + ex + ey - ez;\n    vertexes[6] = c - ex + ey - ez;\n    vertexes[7] = c - ex - ey - ez;\n    float t = INF;\n    vec3 t1norm;\n    vec3 t2norm;\n    vec3 t3norm;\n    vec3 t4norm;\n    vec3 t5norm;\n    vec3 t6norm;\n    vec3 t7norm;\n    vec3 t8norm;\n    vec3 t9norm;\n    vec3 t10norm;\n    vec3 t11norm;\n    vec3 t12norm;\n    float t1 = traceTriangle(vertexes[0], vertexes[1], vertexes[3], pos, dir, t1norm);\n    if (t1 < t && t > 0.0) {\n        t = t1;\n        normal = t1norm;\n    }\n    float t2 = traceTriangle(vertexes[1], vertexes[2], vertexes[3], pos, dir, t2norm);\n    if (t2 < t && t > 0.0) {\n        t = t2;\n        normal = t2norm;\n    }\n    float t3 = traceTriangle(vertexes[2], vertexes[3], vertexes[4], pos, dir, t3norm);\n    if (t3 < t && t > 0.0) {\n        t = t3;\n        normal = t3norm;\n    }\n    float t4 = traceTriangle(vertexes[2], vertexes[4], vertexes[5], pos, dir, t4norm);\n    if (t4 < t && t > 0.0) {\n        t = t4;\n        normal = t4norm;\n    }\n    float t5 = traceTriangle(vertexes[4], vertexes[5], vertexes[6], pos, dir, t5norm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = t5norm;\n    }\n    float t6 = traceTriangle(vertexes[4], vertexes[6], vertexes[7], pos, dir, t6norm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = t6norm;\n    }\n    float t7 = traceTriangle(vertexes[6], vertexes[7], vertexes[1], pos, dir, t7norm);\n    if (t7 < t && t > 0.0) {\n        t = t7;\n        normal = t7norm;\n    }\n    float t8 = traceTriangle(vertexes[0], vertexes[1], vertexes[7], pos, dir, t8norm);\n    if (t8 < t && t > 0.0) {\n        t = t8;\n        normal = t8norm;\n    }\n    float t9 = traceTriangle(vertexes[1], vertexes[2], vertexes[6], pos, dir, t9norm);\n    if (t9 < t && t > 0.0) {\n        t = t9;\n        normal = t9norm;\n    }\n    float t10 = traceTriangle(vertexes[6], vertexes[2], vertexes[5], pos, dir, t10norm);\n    if (t10 < t && t > 0.0) {\n        t = t10;\n        normal = t10norm;\n    }\n    float t11 = traceTriangle(vertexes[0], vertexes[4], vertexes[7], pos, dir, t11norm);\n    if (t11 < t && t > 0.0) {\n        t = t11;\n        normal = t11norm;\n    }\n    float t12 = traceTriangle(vertexes[0], vertexes[3], vertexes[4], pos, dir, t12norm);\n    if (t12 < t && t > 0.0) {\n        t = t12;\n        normal = t12norm;\n    }\n    \n    \n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n}\n\nfloat noise(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1, 57, 21)) + vec4(0, 57, 21, 78);\n\tvec3 f = cos((p-i)*acos(-1.0))*(-0.5) + 0.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.0 + a)*(1.0 + a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat flame(vec3 p)\n{\n    float d = length(vec3(0, 1, 0) - p*vec3(1, 0.7, 1)) - 1.0;\n\treturn d + (noise(p + vec3(0, 5, 0)) + noise(p * 3.0)* 0.7)* 0.25 *(p.y) ;\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n    float k = 64.0;\n\t\n\tfor(int i = 0; i < int(k); i++)\n\t{\n\t\td = min(150.0 - length(p), abs(flame(p))) + eps;\n\t\tp += d * dir;\n\t\tif (d > eps)\n\t\t{\n            glowed = glowed || flame(p) < 0.0;\n\t\t\tglow = glowed ? float(i)/k : 0.0;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 CubeNorm;\n    float CubeT = traceCube(pos, dir, CubeNorm);\n    if (CubeT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight_fire = vec3(0,0, 0) - pos;\n    float dist_fire = dot(toLight_fire, toLight_fire);\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight_fire))) * flamecol *0.3 + \n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal)<0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float val = iTime;\n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x;\n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N);\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        float nEnter = GLASS_N;\n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.125){\n                materialType = REFLECTION;\n            }\n        }\n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR;\n            normal = L1Norm;\n        }\n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n        }   \n        vec3 CubeNorm;\n        float CubeT = traceCube(curPos, curDir, CubeNorm);\n        if (CubeT < t) {\n            t = CubeT;\n            normal = CubeNorm;\n            materialType = REFLECTION;\n            materialType = REFRACTION;\n                if (randVals.x < GLASS_R*2.0) {\n                    materialType = REFLECTION;\n                }else{     \n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0){\n                        n1 = AIR_N;\n                    }else{\n                        n2 = GLASS_N;\n                    }\n                }\n        }\n        vec3 cylNorm; \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { \n            t = cylT;\n            materialType = DIFFUSE; \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3,worldPos.xz*worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }     \n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curPos += curDir * t;\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                if (n1 == AIR_N && n2 == GLASS_N){\n                    vec4 p = raymarch(curPos + vec3(1.2,4.2, -9), curDir);\n                    float glow = p.w;\n                    flamecol = mix(vec3(0.1, 0.6, 1), vec3(1, 0.5, 0.1), p.y * 0.018 + 2.5) ;\n                    color += mix(vec3(0), flamecol, pow(glow * 2.0, 4.0));\n                    colorMult += mix(vec3(0.1,0.1,0.0), flamecol, pow(glow * 2.0, 4.0));\n                }\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult; \n            \n        }\n    }\n}",
     "name": "Buffer A",
     "description": "",
     "type": "buffer"
    }
   ]
  },
  {
   "ver": "0.1",
   "info": {
    "id": "fsj3zt",
    "date": "1618553958",
    "viewed": 83,
    "name": "XNikon Pyramid-Fire",
    "description": "Created by NIKONOV MAXIM 316 \nVK : https://vk.com/xnikon\nE-MAIL : nikon.mv.cmc@gmail.com",
    "likes": 3,
    "published": "Public",
    "usePreview": 0,
    "tags": [
     "unknown"
    ]
   },
   "renderpass": [
    {
     "inputs": [
      {
       "id": "4dfGzn",
       "filepath": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3",
       "type": "music",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dfGRr",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}",
     "name": "Image",
     "description": "",
     "type": "image"
    },
    {
     "inputs": [
      {
       "id": "4dXGRn",
       "filepath": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg",
       "type": "texture",
       "channel": 0,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "4sXGRn",
       "filepath": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg",
       "type": "texture",
       "channel": 3,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsX3zn",
       "filepath": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png",
       "type": "cubemap",
       "channel": 1,
       "sampler": {
        "filter": "mipmap",
        "wrap": "clamp",
        "vflip": "false",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "4sfGRr",
       "filepath": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin",
       "type": "volume",
       "channel": 2,
       "sampler": {
        "filter": "mipmap",
        "wrap": "repeat",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "4dXGR8",
       "channel": 0
      }
     ],
     "code": "/*\n- Работа выполнена студентом 316 группы Никоновым Максимом Викторовичем\n- Контакты в описании \n- Вариант Пирамида с огнем \n- Для проверки отражения пирамиды расскоментировать 535 строчку \n*/\n\n\nconst float INF = 1e10;\nvec3 CAMERA_POS = vec3(1,1.2,-6);\nvec3 LIGHT1_POS = vec3(-3,1.5,5);\nconst float LIGHT1_RADIUS = 0.5; // для сферы - источника света 1\nvec3 LIGHT1_COLOR = vec3(1,1,1);\n\nvec3 LIGHT2_POS = vec3(1,1.5,-1); // последнее 6 тоже хорошо\nconst float LIGHT2_RADIUS = 0.55; // для сферы - источника света 2 \nconst vec3 LIGHT2_COLOR = vec3(0.1,0.7,0.4);\n\n\nvec3 sphere_pos = vec3(-2.2,-0.2,1);\nvec3 sphere_col = vec3(1, 2.75, 1.75);\n\nvec3 fire_pos = vec3(1,1.4,-2);\nvec3 flamecol;\n\nconst int EMISSION = 0; //для материалов\nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float GLASS_N = 1.5; \nconst float AIR_N = 1.0;\nconst float DIAMOND_N = 2.5;\n\nconst float EPS = 0.0000001; //для трассировки пирамиды\n\nvec3 randDir; //для теней\n\n/*\nstruct Triangle {\n    vec3 vertecies[3];\n};\n\nstruct Pyramid {\n    vec3 vertecies[5];\n};\n*/\n\nfloat noise(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1, 57, 21)) + vec4(0, 57, 21, 78);\n\tvec3 f = cos((p-i)*acos(-1.0))*(-0.5) + 0.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.0 + a)*(1.0 + a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\n/*\nfloat tracePlane2(vec3 camPos, vec3 dir, out vec3 N) {\n    float t = (-1.0 - camPos.y)/ dir.y;\n    vec3 worldPos = t * dir + camPos;\n    if (t < 0.0 || dot(worldPos.xz, worldPos.xz) > 100.0) return INF;\n    N = vec3(0, 1, 0);\n    return t;\n}\n*/\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n/*\nfloat traceTriangle(vec3 A, vec3 B, vec3 C, vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 edge0 = B - A;\n    vec3 edge1 = C - B;\n    vec3 edge2 = A - C;\n    vec3 norm = normalize(cross(edge0,edge1));\n    float normalViewAngle = dot(dir, norm);\n    if(abs(normalViewAngle)<EPS){\n        return INF;\n    }\n    float t = dot(A - pos,norm)/normalViewAngle;\n    if(t<0.0){\n        return INF;\n    }\n    vec3 hitPos = pos+t*dir;\n    float square = length(cross(edge0,edge1));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - A,\n        hitPos - B,\n        hitPos - C\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0],edge0)),\n        length(cross(toHitVecs[1],edge1)),\n        length(cross(toHitVecs[2],edge2))\n    );\n    if(abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS){\n        normal = norm;\n        return t;\n    }\n    return INF;\n}\n*/\n\n\nfloat traceTriangle(vec3 vertex0, vec3 vertex1, vec3 vertex2, vec3 pos, vec3 dir, out vec3 N)\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    // начало комментирования\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    // конец комментрования просто ковер \n    return INF;\n}\n\nfloat tracePy(vec3 pos, vec3 dir, out vec3 normal){\n    float ang = 0.5;\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    vec2 pyrXZ1 = rot * vec2(1, -1);\n    vec2 pyrXZ2 = rot * vec2(1, 1);\n    vec2 pyrXZ3 = rot * vec2(-1, 1);\n    vec2 pyrXZ4 = rot * vec2(-1, -1);\n    vec3 norm = vec3(0,sqrt(1.0),0);\n    vec3 dotx1 = vec3(pyrXZ1.x, -0.99, pyrXZ1.y);\n    vec3 dotx2 = vec3(pyrXZ2.x, -0.99, pyrXZ2.y);\n    vec3 dotx3 = vec3(pyrXZ3.x, -0.99, pyrXZ3.y);\n    vec3 dotx4 = vec3(pyrXZ4.x, -0.99, pyrXZ4.y);\n    \n    float t = INF;\n    \n    vec3 t1norm;\n    float t1 = traceTriangle(dotx1, dotx2,norm, pos, dir, t1norm);\n    if (t1 < t && t1 > 0.0) {\n        t = t1;\n        normal = t1norm;\n    }\n    \n    vec3 t2norm;\n    float t2 = traceTriangle(dotx2, dotx3,norm, pos, dir, t2norm);\n    if (t2 < t && t2 > 0.0) {\n        t = t2;\n        normal = t2norm;\n    }\n    \n    vec3 t3norm;\n    float t3 = traceTriangle(dotx3, dotx4,norm, pos, dir, t3norm);\n    if (t3 < t && t3 > 0.0) {\n        t = t3;\n        normal = t3norm;\n    }\n    \n    vec3 t4norm;\n    float t4 = traceTriangle(dotx4, dotx1,norm, pos, dir, t4norm);\n    if (t4 < t && t4 > 0.0) {\n        t = t4;\n        normal = t4norm;\n    }\n    \n    vec3 t5norm;\n    float t5 = traceTriangle(dotx1, dotx2, dotx3, pos, dir, t5norm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = t5norm;\n    }\n    \n    vec3 t6norm;\n    float t6 = traceTriangle(dotx3, dotx4, dotx1, pos, dir, t6norm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = t6norm;\n    }\n    \n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n    \n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyNorm;\n    float pyT = tracePy(pos, dir, pyNorm);\n    if (pyT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    \n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    \n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    vec3 toLight_fire = fire_pos - pos;\n    float dist_fire = dot(toLight_fire, toLight_fire);\n    \n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight_fire))) * flamecol *0.6 + \n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal)<0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n/*\nvec3 planeThrough3Points(vec3 p1, vec3 p2, vec3 p3, out float move) {\n    vec3 p1p2 = p1 - p2;\n    vec3 p1p3 = p1 - p3;\n    \n    vec3 normal = cross(p1p2, p1p3);\n    move = dot(normal, p1);\n    return normal;\n}\n*/\n\n/*\nfloat traceTriangle(vec3 dot1, vec3 dot2, vec3 dot3,vec3 pos, vec3 dir, out vec3 normal) {\n    \n    float move;\n    \n    vec3 norm = planeThrough3Points(dot1, dot2, dot3, move);\n    \n    // dot(pos + t * dir, norm) == move\n    // t = (move - dot(pos, norm)) / dot(dir, norm)\n    \n    float divider = dot(dir, norm);\n    float div = move - dot(pos, norm);\n    \n    /*if (divider < 1e-12) {\n        return INF;\n    }//конец коммента\n    \n    float t = div / divider;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    \n   \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n    \n    float angle12 = acos(dot(v1, v2));\n    float angle13 = acos(dot(v1, v3));\n    float angle23 = acos(dot(v2, v3));\n    \n    if (abs(angle12 + angle13 + angle23 - radians(360.0)) < 1e-3) {\n        normal = normalize(norm);\n        float angle = acos(dot(normalize(dir), normal));\n        if (angle < radians(90.0)) {\n            normal = -normalize(norm);\n        }\n        return t;\n    } else {\n        return INF;\n    }\n    \n}\n*/ \n\nfloat fogSdf(vec3 pos)\n{\n    pos = pos - vec3(1,1.4,-6);\n    return length(pos) - 0.3;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            return vec4(1,0,1,0);\n            \n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel2, curPos * 0.2).x\n            + texture(iChannel2, curPos * 0.4).x\n            + texture(iChannel2, curPos * 0.8).x\n            + texture(iChannel2, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n            \n        }\n    }\n    //return vec4(1,0,0,0);\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\n\nfloat flame(vec3 p)\n{\n    float d = length(vec3(0, 1, 0) - p*vec3(1, 0.7, 1)) - 1.0;\n\treturn d + (noise(p + vec3(0, 5, 0)) + noise(p * 3.0)* 0.7)* 0.25 *(p.y) ;\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n    float k = 64.0;\n\t\n\tfor(int i = 0; i < int(k); i++)\n\t{\n\t\td = min(150.0 - length(p), abs(flame(p))) + eps;\n\t\tp += d * dir;\n\t\tif (d > eps)\n\t\t{\n            glowed = glowed || flame(p) < 0.0;\n\t\t\tglow = glowed ? float(i)/k : 0.0;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    float val = iTime;\n    //CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x; //блюр\n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    vec3 LIGHT1_POS = vec3(-3,1.5,5) + vec3(0,1,0)* randVals.x *0.1; //блюр - доп балл \n    //vec3 LIGHT1_POS = vec3(-3,1.5,5) \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N);\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        \n        float nEnter = GLASS_N;\n        \n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.125){\n                materialType = REFLECTION;\n            }\n        }\n        \n        \n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR * texture(iChannel3,(worldPos.yx* worldPos.z) * 0.01).rgb;\n            normal = L1Norm;\n        }\n        \n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            n1 = AIR_N;\n            n2 = AIR_N;\n            //materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n            materialType = REFRACTION;\n            //if (randVals.x < 2.0*GLASS_R) {\n            //    materialType = REFLECTION;\n            //}else{     \n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = AIR_N;\n                }\n            //}\n        }\n        \n        \n        //uncomment для отражения пирамиды\n        \n        /*\n        vec3 L3Norm;\n        float light3T = traceSphere(curPos - sphere_pos, curDir, 0.223, L3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR * texture(iChannel3,(worldPos.yx* worldPos.z) * 0.01).rgb;\n            normal = L3Norm;\n        }\n        */\n        \n        \n        \n        vec3 pyNorm;\n        float pyT = tracePy(curPos, curDir, pyNorm);\n        if (pyT < t) {\n            t = pyT;\n            normal = pyNorm;\n            materialType = REFLECTION;\n            \n            //color = reflect(curDir, normal);\n            \n            materialType = REFRACTION;\n                if (randVals.x < GLASS_R*2.0) {\n                materialType = REFLECTION;\n            }else{     \n                materialType = REFRACTION;\n                \n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = GLASS_N;\n                }\n                \n            }\n        }\n        \n\n        vec3 cylNorm; \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { \n            t = cylT;\n            materialType = DIFFUSE; \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3,worldPos.xz*worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }\n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                if (n1 == AIR_N && n2 == GLASS_N){\n                    vec4 p = raymarch(curPos + vec3(2.0, 5.0, -8), curDir);\n                    float glow = p.w;\n                    flamecol = mix(vec3(0.1, 0.6, 1), vec3(1, 0.5, 0.1), p.y * 0.018 + 2.5) ;\n                    color += mix(vec3(0), flamecol, pow(glow * 2.0, 4.0));\n                    colorMult += mix(vec3(0.1,0.1,0.0), flamecol, pow(glow * 2.0, 4.0));\n                }\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult * vec3(0.6,0.7,0.4); // доп баллы за cubmap\n            \n        }\n    }\n}",
     "name": "Buffer A",
     "description": "",
     "type": "buffer"
    },
    {
     "inputs": [
      {
       "id": "4dXGR8",
       "filepath": "/media/previz/buffer00.png",
       "type": "buffer",
       "channel": 0,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      },
      {
       "id": "XsXGR8",
       "filepath": "/media/previz/buffer01.png",
       "type": "buffer",
       "channel": 1,
       "sampler": {
        "filter": "linear",
        "wrap": "clamp",
        "vflip": "true",
        "srgb": "false",
        "internal": "byte"
       },
       "published": 1
      }
     ],
     "outputs": [
      {
       "id": "XsXGR8",
       "channel": 0
      }
     ],
     "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1,uv);\n}",
     "name": "Buffer B",
     "description": "",
     "type": "buffer"
    }
   ]
  }
 ]
}